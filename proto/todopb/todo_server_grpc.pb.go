// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package todopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error)
	TodoById(ctx context.Context, in *TodoCriteria, opts ...grpc.CallOption) (*Todo, error)
	TodoByCriteria(ctx context.Context, in *TodoCriteria, opts ...grpc.CallOption) (*TodoList, error)
	TodoByCriteriaGrpc(ctx context.Context, in *TodoCriteria, opts ...grpc.CallOption) (TodoService_TodoByCriteriaGrpcClient, error)
	UpdateTodoById(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error)
	DeleteTodoByCriteria(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*TodoId, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/proto.TodoService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) TodoById(ctx context.Context, in *TodoCriteria, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/proto.TodoService/TodoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) TodoByCriteria(ctx context.Context, in *TodoCriteria, opts ...grpc.CallOption) (*TodoList, error) {
	out := new(TodoList)
	err := c.cc.Invoke(ctx, "/proto.TodoService/TodoByCriteria", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) TodoByCriteriaGrpc(ctx context.Context, in *TodoCriteria, opts ...grpc.CallOption) (TodoService_TodoByCriteriaGrpcClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], "/proto.TodoService/TodoByCriteriaGrpc", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceTodoByCriteriaGrpcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_TodoByCriteriaGrpcClient interface {
	Recv() (*Todo, error)
	grpc.ClientStream
}

type todoServiceTodoByCriteriaGrpcClient struct {
	grpc.ClientStream
}

func (x *todoServiceTodoByCriteriaGrpcClient) Recv() (*Todo, error) {
	m := new(Todo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) UpdateTodoById(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*Todo, error) {
	out := new(Todo)
	err := c.cc.Invoke(ctx, "/proto.TodoService/UpdateTodoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodoByCriteria(ctx context.Context, in *TodoId, opts ...grpc.CallOption) (*TodoId, error) {
	out := new(TodoId)
	err := c.cc.Invoke(ctx, "/proto.TodoService/DeleteTodoByCriteria", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	CreateTodo(context.Context, *CreateTodoRequest) (*Todo, error)
	TodoById(context.Context, *TodoCriteria) (*Todo, error)
	TodoByCriteria(context.Context, *TodoCriteria) (*TodoList, error)
	TodoByCriteriaGrpc(*TodoCriteria, TodoService_TodoByCriteriaGrpcServer) error
	UpdateTodoById(context.Context, *CreateTodoRequest) (*Todo, error)
	DeleteTodoByCriteria(context.Context, *TodoId) (*TodoId, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) CreateTodo(context.Context, *CreateTodoRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoServiceServer) TodoById(context.Context, *TodoCriteria) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TodoById not implemented")
}
func (UnimplementedTodoServiceServer) TodoByCriteria(context.Context, *TodoCriteria) (*TodoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TodoByCriteria not implemented")
}
func (UnimplementedTodoServiceServer) TodoByCriteriaGrpc(*TodoCriteria, TodoService_TodoByCriteriaGrpcServer) error {
	return status.Errorf(codes.Unimplemented, "method TodoByCriteriaGrpc not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodoById(context.Context, *CreateTodoRequest) (*Todo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoById not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoByCriteria(context.Context, *TodoId) (*TodoId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoByCriteria not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodoService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_TodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).TodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodoService/TodoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).TodoById(ctx, req.(*TodoCriteria))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_TodoByCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).TodoByCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodoService/TodoByCriteria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).TodoByCriteria(ctx, req.(*TodoCriteria))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_TodoByCriteriaGrpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TodoCriteria)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).TodoByCriteriaGrpc(m, &todoServiceTodoByCriteriaGrpcServer{stream})
}

type TodoService_TodoByCriteriaGrpcServer interface {
	Send(*Todo) error
	grpc.ServerStream
}

type todoServiceTodoByCriteriaGrpcServer struct {
	grpc.ServerStream
}

func (x *todoServiceTodoByCriteriaGrpcServer) Send(m *Todo) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_UpdateTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodoService/UpdateTodoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodoById(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodoByCriteria_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodoByCriteria(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TodoService/DeleteTodoByCriteria",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodoByCriteria(ctx, req.(*TodoId))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodoService_CreateTodo_Handler,
		},
		{
			MethodName: "TodoById",
			Handler:    _TodoService_TodoById_Handler,
		},
		{
			MethodName: "TodoByCriteria",
			Handler:    _TodoService_TodoByCriteria_Handler,
		},
		{
			MethodName: "UpdateTodoById",
			Handler:    _TodoService_UpdateTodoById_Handler,
		},
		{
			MethodName: "DeleteTodoByCriteria",
			Handler:    _TodoService_DeleteTodoByCriteria_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TodoByCriteriaGrpc",
			Handler:       _TodoService_TodoByCriteriaGrpc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/todopb/todo_server.proto",
}
